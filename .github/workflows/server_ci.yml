name: Docker Build and Push

on:
  push:
    branches:
      - master
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install --no-cache-dir -r requirements.txt

      - name: Run Tests
        run: pytest test_app.py  # Test dosyanız burada çalıştırılıyor

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Version
        id: get_version
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v1.0.0"
          fi
          
          IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
          major="${version_parts[0]}"
          minor="${version_parts[1]}"
          patch="${version_parts[2]}"
          
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"

          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/snowy_server:${{ env.VERSION }} .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/snowy_server:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/snowy_server:${{ env.VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/snowy_server:latest

      - name: Create and Push Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Eğer tag zaten varsa silip tekrar ekleyelim (hata önlemek için)
          git tag -d ${{ env.VERSION }} || true
          git push --delete origin ${{ env.VERSION }} || true

          # Yeni tag oluştur ve push et
          git tag ${{ env.VERSION }}
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push origin ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
